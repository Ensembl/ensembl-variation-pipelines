nextflow_process {

    name "Test Process vcfToBed"
    script "nf_modules/vcf_to_bed.nf"
    process "vcfToBed"

    test("Should run without failures") {

        when {
            params {
                rank_file = "${baseDir}/nf_config/variation_consequnce_rank.json"
            }
            process {
                """
                input[0] = "done"
                input[1] = tuple("original.vcf.gz", file("$baseDir/tests/data/test.vcf.gz"), "test_genome", "test_source", 1)
                """
            }
        }

        then {
            // assert process run correctly
            assert process.success
            
            // assert each output items value
            // here get(0) gives the first ouput channel - we can use the name if we have used emit
            with (process.out.get(0)) {
                // output is a tuple which gives unordered list of ordered list. So we have to delve with two nested loop
                with (get(0)) {
                  assert get(0) == "original.vcf.gz"
                  assert get(1) ==~ ".*original.vcf.gz-test.vcf.gz"
                  assert get(2) == "test_genome"
                  assert get(3) == "test_source"
                  assert get(4) == 1
                }
            }  
            
            // assert the content of the output file
            def output_file = file(process.out.get(0).get(0).get(1))
            def lines = output_file.readLines()
            assert lines.size() == 7
            
            // vcf file line 1: convert sequence_alteration --> indel (the alt alleles can be in any order as Rust hashset is random ordered)
            assert (
              lines[0] == "1 15110141 15110159 rs1356759330 indel TTGTGTATGTGTGTGCATA TTGTGTATGTGTGTGCATATGTGTATGTGTGTGCATA/T 3 intron_variant" ||
              lines[0] == "1 15110141 15110159 rs1356759330 indel TTGTGTATGTGTGTGCATA T/TTGTGTATGTGTGTGCATATGTGTATGTGTGTGCATA 3 intron_variant"
            )
            
            // vcf file line 2: ignored - rsID equals to "."
            
            // vcf file line 3: biallelic deletion
            assert lines[1] == "chr1 10108 10114 rs1377973775 deletion CAACCCT C 5 upstream_gene_variant"
            
            // vcf file line 4: biallelic SNV
            assert lines[2] == "chr13 32357725 32357725 rs754065641 SNV G C 2 splice_polypyrimidine_tract_variant"
            
            // vcf file line 5: ignored - redundant variant
            
            // vcf file line 6 and 7: comapatible variant - so merge
            assert (
              lines[3] == "chr19 60558 60558 rs1260281513 SNV A G/T 5 downstream_gene_variant" ||
              lines[3] == "chr19 60558 60558 rs1260281513 SNV A T/G 5 downstream_gene_variant"
            )
            
            // vcf file line 8: biallelic indel
            assert (
              lines[4] == "NC_000001.11 10055 10056 rs768019142 indel TA TAA/T 5 upstream_gene_variant"  ||          
              lines[4] == "NC_000001.11 10055 10056 rs768019142 indel TA T/TAA 5 upstream_gene_variant"            
            )
            
            // vcf file line 9: biallelic substitution
            assert lines[5] == "NC_000001.11 63738 63740 rs869033224 substitution ACT CTA 3 non_coding_transcript_exon_variant"
            
            // vcf file line 10: do not convert sequence_alteration --> indel
            assert (
              lines[6] == "NC_000001.11 63739 63740 rs12345678 sequence_alteration CT CTA/GC 3 non_coding_transcript_exon_variant" ||
              lines[6] == "NC_000001.11 63739 63740 rs12345678 sequence_alteration CT GC/CTA 3 non_coding_transcript_exon_variant"
            )
        }

    }

}
