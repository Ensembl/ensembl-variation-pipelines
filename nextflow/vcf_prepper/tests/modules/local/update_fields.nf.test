nextflow_process {

    name "Test Process UPDATE_FIELDS"
    script "modules/local/update_fields.nf"
    process "UPDATE_FIELDS"

    test("Source not clinvar") {

        when {
            params {
                rename_clinvar_ids = 1
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [
                            source: "test_source",
                            synonym_file: "$baseDir/tests/data/homo_sapiens_grch38.synonyms"
                        ], 
                        "$baseDir/tests/data/test_updatefields.vcf.gz",
                        "$baseDir/tests/data/test_updatefields.vcf.gz.tbi"
                    ]
                )
                """
            }
        }

        then {
            assert process.success

            def output_file = file(process.out.get(0).get(0).get(1))
            def lines = output_file.readLines()
            assert lines.size() == 7

            assert lines[0].equals("##fileformat=VCFv4.2")
            assert lines[1].equals("##INFO=<ID=SOURCE,Number=1,Type=String,Description=\"Source of the variation data\">")
            assert lines[2].equals("##contig=<ID=1>")
            assert lines[3].equals("##contig=<ID=Y>")
            assert lines[4].equals("#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO")
            assert lines[5].equals("1\t925952\t1019397\tG\tA\t.\t.\tSOURCE=test_source")
            assert lines[6].equals("Y\t2787033\t652674\tAG\tA\t.\t.\tSOURCE=test_source")
        }

    }

    test("Source clinvar") {

        when {
            params {
                rename_clinvar_ids = 1
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [
                            source: "ClinVar",
                            synonym_file: "$baseDir/tests/data/homo_sapiens_grch38.synonyms"
                        ], 
                        "$baseDir/tests/data/test_updatefields.vcf.gz",
                        "$baseDir/tests/data/test_updatefields.vcf.gz.tbi"
                    ]
                )
                """
            }
        }

        then {
            assert process.success

            def output_file = file(process.out.get(0).get(0).get(1))
            def lines = output_file.readLines()
            assert lines.size() == 7

            assert lines[0].equals("##fileformat=VCFv4.2")
            assert lines[1].equals("##INFO=<ID=SOURCE,Number=1,Type=String,Description=\"Source of the variation data\">")
            assert lines[2].equals("##contig=<ID=1>")
            assert lines[3].equals("##contig=<ID=Y>")
            assert lines[4].equals("#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO")
            assert lines[5].equals("1\t925952\tVCV001019397\tG\tA\t.\t.\tSOURCE=ClinVar")
            assert lines[6].equals("Y\t2787033\tVCV000652674\tAG\tA\t.\t.\tSOURCE=ClinVar")
        }

    }


}
