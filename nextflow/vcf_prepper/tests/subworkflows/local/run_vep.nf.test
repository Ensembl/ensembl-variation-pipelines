nextflow_workflow {

    name "Test Workflow RUN_VEP"
    script "subworkflows/local/run_vep.nf"
    workflow "RUN_VEP"

    test("Should run without failures") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            genome_api_outdir: "$workDir", 
                            index_type: "tbi",
                            genome: "test_genome",
                            source: "test_source",
                            vep_config: "$baseDir/tests/data/homo_sapiens_GRCh38.ini"
                        ], 
                        "$baseDir/tests/data/test_runvep.vcf.gz"
                    ]
                )
                """
            }
        }

        then {
            assert workflow.success
            with (workflow.out.ch_post_vep) {
                assert size() == 1
                
                assert get(0).get(1) ==~ ".*/test_genome-test_source_VEP.vcf.gz" 
                path(get(0).get(1)).linesGzip.size() == 82
                
                def line = path(get(0).get(1)).linesGzip[81]
                def consequences = line
                    .split("\t")[7]
                    .split("CSQ=")[-1]
                    .split(",")[0]
                    .split("\\|")

                // Allele
                assert consequences[0].equals("G")
                // Consequence
                assert consequences[1].equals("missense_variant")
                // Feature
                assert consequences[6].equals("ENST00000366667")
                // Existing variant
                assert consequences[17].equals("rs699&CM920010&COSV64184214")
                // Variant class
                assert consequences[21].equals("SNV")
                // SPDI
                assert consequences[22].equals("1:230710047:A:G")
                // SIFT
                assert consequences[26].equals("tolerated(1)")
                // PolyPhen
                assert consequences[27].equals("benign(0)")
                // 1kg AF
                assert consequences[28].equals("0.7051")
                assert consequences[29].equals("0.9032")
                assert consequences[30].equals("0.6354")
                assert consequences[31].equals("0.8532")
                assert consequences[32].equals("0.4115")
                assert consequences[33].equals("0.636")
                // Pubmed
                assert consequences[37].contains("21533139")
                // Variant synonyms
                assert consequences[38].contains("UniProt::VAR_007096")
                assert consequences[38].contains("COSMIC::COSM425562")
                assert consequences[38].contains("PharmGKB::PA166153539")
                // CADD
                assert consequences[44].equals("0.347")
                assert consequences[45].equals("-0.277922")
                // REVEL
                assert consequences[46].equals("0.157")
                // SpliceAI
                assert consequences[47].equals("-19")
                assert consequences[48].equals("34")
                assert consequences[49].equals("-47")
                assert consequences[50].equals("45")
                assert consequences[51].equals("0.00")
                assert consequences[52].equals("0.00")
                assert consequences[53].equals("0.00")
                assert consequences[54].equals("0.00")
                assert consequences[55].equals("AGT")
                // Phenotypes
                assert consequences[56].contains("HYPERTENSION__ESSENTIAL__SUSCEPTIBILITY_TO+ClinVar+rs699")
                // Ancestral Allele
                assert consequences[60].equals("G")
                // GERP
                assert consequences[61].equals("-2.920")
                // gnomAD AF
                assert consequences[62..117].join("").size() > 56
            }
        }

    }

}
